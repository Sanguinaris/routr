apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-routr-edgeport
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include ".helm.labels" . | nindent 4 }}
    service: edgeport
spec:
  replicas: {{ .Values.edgeport.replicas }}
  selector:
    matchLabels:
      {{- include ".helm.selectorLabels" . | nindent 6 }}
      service: edgeport
  serviceName: edgeport
  minReadySeconds: {{ .Values.edgeport.minReadySeconds }}
  template:
    metadata:
      annotations:
      {{- with .Values.edgeport.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/edgeport/configmaps.yaml") . | sha256sum }}            
      labels:
        {{- include ".helm.selectorLabels" . | nindent 8 }}
        service: edgeport
    spec:
      securityContext:
        runAsUser: {{ .Values.edgeport.securityContext.runAsUser }}
        runAsGroup: {{ .Values.edgeport.securityContext.runAsGroup }}
        fsGroup: {{ .Values.edgeport.securityContext.fsGroup }}
      terminationGracePeriodSeconds: {{ .Values.edgeport.terminationGracePeriodSeconds }}
      containers:
        - name: edgeport
          image: "{{ .Values.edgeport.image.repository }}:{{ .Values.edgeport.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.edgeport.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: {{ .Values.edgeport.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.edgeport.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.edgeport.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.edgeport.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.edgeport.livenessProbe.timeoutSeconds }}
          env:
            - name: LOGS_LEVEL
              value: {{ .Values.global.logsLevel }}
            - name: OTEL_EXPORTER_JAEGER_ENDPOINT
              value: {{ .Values.global.otlExporter }}
          ports:
            - containerPort: 8080
          {{- if .Values.edgeport.transport.tcp.enabled }}
            - name: siptcp
              protocol: TCP
              containerPort: {{ .Values.edgeport.transport.tcp.port }}
          {{- end }}
          {{- if .Values.edgeport.transport.udp.enabled }}
            - name: sipudp
              protocol: UDP
              containerPort: {{ .Values.edgeport.transport.udp.port }}
          {{- end }}
          {{- if .Values.edgeport.transport.tls.enabled }}
            - name: siptls
              protocol: TCP
              containerPort: {{ .Values.edgeport.transport.tls.port }}
          {{- end }}      
          {{- if .Values.edgeport.transport.ws.enabled }}
            - name: sipws
              protocol: TCP
              containerPort: {{ .Values.edgeport.transport.ws.port }}
          {{- end }}
          {{- if .Values.edgeport.transport.wss.enabled }}
            - name: sipwss
              protocol: TCP
              containerPort: {{ .Values.edgeport.transport.wss.port }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/routr/log4j2.yaml
              subPath: log4j2.yaml
            - name: config
              mountPath: /etc/routr/edgeport.yaml
              subPath: edgeport.yaml
            # - mountPath: /etc/routr/letsencrypt
            #   name: letscrypt-certificate
          resources:
            {{- if .Values.edgeport.resources.limits }}
            limits:
            {{- .Values.edgeport.resources.limits | toYaml | nindent 14 }}
            {{- end }}
            {{- if .Values.edgeport.resources.requests }}
            requests:
            {{- .Values.edgeport.resources.requests | toYaml | nindent 14 }}
            {{- end }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.edgeport.securityContext.allowPrivilegeEscalation }}
      volumes:
        - name: config
          configMap:
            name:  {{ .Release.Name }}-routr-edgeport-config
        # - name: letscrypt-certificate
        #   secret:
        #     secretName: {{ .Release.Name }}-routr-letsencrypt
